/**
 * Entry point: รับ POST จาก Trigger/Dialogflow (pattern ตามตัวอย่าง)
 */

// config
const SCRIPT_PROPS   = PropertiesService.getScriptProperties();
const SPREADSHEET_ID = SCRIPT_PROPS.getProperty('DATA_SHEET_ID');
const SHEET_NAME     = SCRIPT_PROPS.getProperty('DATA_SHEET_NAME'); // "Master"
const COL_DOC_NO     = 'เลขที่รับเข้า';
const COL_KEYWORDS   = 'keyword_for_search';
const COL_TITLE      = 'หัวข้อชื่อหนังสือ';
const LOG_SHEET_ID   = SCRIPT_PROPS.getProperty('LOG_SHEET_ID');
const LOG_SHEET_NAME = SCRIPT_PROPS.getProperty('LOG_SHEET_NAME');
const RIS_SHEET_ID   = SCRIPT_PROPS.getProperty('RIS_SHEET_ID');
const RIS_SHEET_NAME = SCRIPT_PROPS.getProperty('RIS_SHEET_NAME');


function doPost(e) {
  try {
    if (!e || !e.postData || !e.postData.contents) {
      return jsonOut({ status: 'error', message: 'Empty request body' }, 400);
    }

    // Parse body
    var body = JSON.parse(e.postData.contents);

    // ดึงข้อมูลสำคัญ
    var userId = getUserIdFromRequest(body);
    var displayName = getIntentDisplayName(body);

    if (!userId) {
      return jsonOut({ status: 'error', message: 'LINE userId not found in request body' }, 400);
    }

    // เงื่อนไขตามข้อ 5: ถ้า displayName = "SearchByKeyboard" ให้ส่ง "Success"
    if (displayName === 'SearchByKeyboard') {
      var pushRes = sendPushMessage(userId, 'Success');
      return jsonOut({ status: 'success', message: 'Push Success sent', lineResponse: pushRes }, 200);
    }

    // เงื่อนไขอื่น ๆ (ถ้าต้องการต่อยอด): 
    // ตัวอย่าง: ถ้าต้องการส่ง echo ข้อความที่ผู้ใช้พิมพ์ หรือส่งค่าอื่น
    // ในที่นี้จะส่งข้อความเริ่มต้นกลับไปแจ้งว่าไม่เข้าเงื่อนไขหลัก
    var fallbackMsg = 'Received request but no matching condition. intent.displayName=' + (displayName || 'N/A');
    var pushRes2 = sendPushMessage(userId, fallbackMsg);
    return jsonOut({ status: 'success', message: 'Fallback pushed', lineResponse: pushRes2 }, 200);

  } catch (err) {
    return jsonOut({ status: 'error', message: err && err.toString ? err.toString() : String(err) }, 500);
  }
}

/**
 * ส่ง Push Message ไปยัง LINE (ใช้ CHANNEL_ACCESS_TOKEN จาก Script Properties)
 * @param {string} userId 
 * @param {string|Object} message - ส่งได้ทั้งข้อความ string หรือโครงสร้าง message object ของ LINE
 * @returns {Object} สรุปผลการเรียก API (statusCode, body)
 */
function sendPushMessage(userId, message) {
  var token = getChannelAccessToken_();
  if (!token) {
    throw new Error('CHANNEL_ACCESS_TOKEN is not set in Script Properties');
  }

  var url = 'https://api.line.me/v2/bot/message/push';

  var msgObject;
  if (typeof message === 'string') {
    msgObject = { type: 'text', text: message };
  } else {
    // กรณีส่งเป็น object (เช่น flex/message types อื่นในอนาคต)
    msgObject = message;
  }

  var payload = {
    to: userId,
    messages: [msgObject]
  };

  var options = {
    method: 'post',
    contentType: 'application/json',
    headers: { Authorization: 'Bearer ' + token },
    payload: JSON.stringify(payload),
    muteHttpExceptions: true
  };

  var response = UrlFetchApp.fetch(url, options);
  var code = response.getResponseCode();
  var text = response.getContentText();

  Logger.log('LINE API Response: ' + code + ' ' + text);

  // ถ้าต้องการโยน error เมื่อไม่ใช่ 200-class
  if (code < 200 || code >= 300) {
    throw new Error('LINE push failed: ' + code + ' ' + text);
  }

  return { statusCode: code, body: text };
}

/**
 * ดึง userId ของ LINE จาก body ตาม pattern ตัวอย่าง
 * รองรับ path: originalDetectIntentRequest.payload.data.source.userId
 */
function getUserIdFromRequest(body) {
  try {
    // ป้องกันกรณี path บางชั้นไม่มีอยู่
    var req = body || {};
    var odi = req.originalDetectIntentRequest || {};
    var payload = odi.payload || {};
    var data = payload.data || {};
    var source = data.source || {};
    var userId = source.userId || null;
    return userId;
  } catch (e) {
    return null;
  }
}

/**
 * ดึง intent.displayName จาก body
 */
function getIntentDisplayName(body) {
  try {
    var qr = (body && body.queryResult) || {};
    var intent = qr.intent || {};
    return intent.displayName || null;
  } catch (e) {
    return null;
  }
}

/**
 * Helper: อ่าน CHANNEL_ACCESS_TOKEN จาก Script Properties
 */
function getChannelAccessToken_() {
  return PropertiesService.getScriptProperties().getProperty('CHANNEL_ACCESS_TOKEN');
}

/**
 * Helper: สร้าง JSON response ออกไป
 * @param {Object} obj 
 * @param {number} statusCode 
 */
function jsonOut(obj, statusCode) {
  var output = ContentService.createTextOutput(JSON.stringify(obj))
    .setMimeType(ContentService.MimeType.JSON);
  if (statusCode && output.setStatusCode) {
    // setStatusCode ใช้ได้บน Web Apps รุ่นใหม่ / Execution API บางโหมด
    try { output.setStatusCode(statusCode); } catch (e) {}
  }
  return output;
}

